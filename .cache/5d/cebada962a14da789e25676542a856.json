{"id":"node_modules/turbo-stream/dist/flatten.js","dependencies":[{"name":"C:\\Users\\Admin\\Downloads\\REACT\\package.json","includedInParent":true,"mtime":1740094720055},{"name":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\package.json","includedInParent":true,"mtime":1740094241366},{"name":"./utils.js","loc":{"line":4,"column":27,"index":130},"parent":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\dist\\flatten.js","resolved":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\dist\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.flatten = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nfunction flatten(input) {\n    const { indices } = this;\n    const existing = indices.get(input);\n    if (existing)\n        return [existing];\n    if (input === undefined)\n        return utils_js_1.UNDEFINED;\n    if (input === null)\n        return utils_js_1.NULL;\n    if (Number.isNaN(input))\n        return utils_js_1.NAN;\n    if (input === Number.POSITIVE_INFINITY)\n        return utils_js_1.POSITIVE_INFINITY;\n    if (input === Number.NEGATIVE_INFINITY)\n        return utils_js_1.NEGATIVE_INFINITY;\n    if (input === 0 && 1 / input < 0)\n        return utils_js_1.NEGATIVE_ZERO;\n    const index = this.index++;\n    indices.set(input, index);\n    stringify.call(this, input, index);\n    return index;\n}\nexports.flatten = flatten;\nfunction stringify(input, index) {\n    const { deferred, plugins, postPlugins } = this;\n    const str = this.stringified;\n    const stack = [[input, index]];\n    while (stack.length > 0) {\n        const [input, index] = stack.pop();\n        const partsForObj = (obj) => Object.keys(obj)\n            .map((k) => `\"_${flatten.call(this, k)}\":${flatten.call(this, obj[k])}`)\n            .join(\",\");\n        let error = null;\n        switch (typeof input) {\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                str[index] = JSON.stringify(input);\n                break;\n            case \"bigint\":\n                str[index] = `[\"${utils_js_1.TYPE_BIGINT}\",\"${input}\"]`;\n                break;\n            case \"symbol\": {\n                const keyFor = Symbol.keyFor(input);\n                if (!keyFor) {\n                    error = new Error(\"Cannot encode symbol unless created with Symbol.for()\");\n                }\n                else {\n                    str[index] = `[\"${utils_js_1.TYPE_SYMBOL}\",${JSON.stringify(keyFor)}]`;\n                }\n                break;\n            }\n            case \"object\": {\n                if (!input) {\n                    str[index] = `${utils_js_1.NULL}`;\n                    break;\n                }\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    let result = isArray ? \"[\" : \"{\";\n                    if (isArray) {\n                        for (let i = 0; i < input.length; i++)\n                            result +=\n                                (i ? \",\" : \"\") +\n                                    (i in input ? flatten.call(this, input[i]) : utils_js_1.HOLE);\n                        str[index] = `${result}]`;\n                    }\n                    else if (input instanceof Date) {\n                        str[index] = `[\"${utils_js_1.TYPE_DATE}\",${input.getTime()}]`;\n                    }\n                    else if (input instanceof URL) {\n                        str[index] = `[\"${utils_js_1.TYPE_URL}\",${JSON.stringify(input.href)}]`;\n                    }\n                    else if (input instanceof RegExp) {\n                        str[index] = `[\"${utils_js_1.TYPE_REGEXP}\",${JSON.stringify(input.source)},${JSON.stringify(input.flags)}]`;\n                    }\n                    else if (input instanceof Set) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\",${[...input]\n                                .map((val) => flatten.call(this, val))\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\"]`;\n                        }\n                    }\n                    else if (input instanceof Map) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\",${[...input]\n                                .flatMap(([k, v]) => [\n                                flatten.call(this, k),\n                                flatten.call(this, v),\n                            ])\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\"]`;\n                        }\n                    }\n                    else if (input instanceof Promise) {\n                        str[index] = `[\"${utils_js_1.TYPE_PROMISE}\",${index}]`;\n                        deferred[index] = input;\n                    }\n                    else if (input instanceof Error) {\n                        str[index] = `[\"${utils_js_1.TYPE_ERROR}\",${JSON.stringify(input.message)}`;\n                        if (input.name !== \"Error\") {\n                            str[index] += `,${JSON.stringify(input.name)}`;\n                        }\n                        str[index] += \"]\";\n                    }\n                    else if (Object.getPrototypeOf(input) === null) {\n                        str[index] = `[\"${utils_js_1.TYPE_NULL_OBJECT}\",{${partsForObj(input)}}]`;\n                    }\n                    else if (isPlainObject(input)) {\n                        str[index] = `{${partsForObj(input)}}`;\n                    }\n                    else {\n                        error = new Error(\"Cannot encode object with prototype\");\n                    }\n                }\n                break;\n            }\n            default: {\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    error = new Error(\"Cannot encode function or unexpected type\");\n                }\n            }\n        }\n        if (error) {\n            let pluginHandled = false;\n            if (postPlugins) {\n                for (const plugin of postPlugins) {\n                    const pluginResult = plugin(input);\n                    if (Array.isArray(pluginResult)) {\n                        pluginHandled = true;\n                        const [pluginIdentifier, ...rest] = pluginResult;\n                        str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                        if (rest.length > 0) {\n                            str[index] += `,${rest\n                                .map((v) => flatten.call(this, v))\n                                .join(\",\")}`;\n                        }\n                        str[index] += \"]\";\n                        break;\n                    }\n                }\n            }\n            if (!pluginHandled) {\n                throw error;\n            }\n        }\n    }\n}\nconst objectProtoNames = Object.getOwnPropertyNames(Object.prototype)\n    .sort()\n    .join(\"\\0\");\nfunction isPlainObject(thing) {\n    const proto = Object.getPrototypeOf(thing);\n    return (proto === Object.prototype ||\n        proto === null ||\n        Object.getOwnPropertyNames(proto).sort().join(\"\\0\") === objectProtoNames);\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/turbo-stream/dist/flatten.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}}],"sources":{"node_modules/turbo-stream/dist/flatten.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.flatten = void 0;\nconst utils_js_1 = require(\"./utils.js\");\nfunction flatten(input) {\n    const { indices } = this;\n    const existing = indices.get(input);\n    if (existing)\n        return [existing];\n    if (input === undefined)\n        return utils_js_1.UNDEFINED;\n    if (input === null)\n        return utils_js_1.NULL;\n    if (Number.isNaN(input))\n        return utils_js_1.NAN;\n    if (input === Number.POSITIVE_INFINITY)\n        return utils_js_1.POSITIVE_INFINITY;\n    if (input === Number.NEGATIVE_INFINITY)\n        return utils_js_1.NEGATIVE_INFINITY;\n    if (input === 0 && 1 / input < 0)\n        return utils_js_1.NEGATIVE_ZERO;\n    const index = this.index++;\n    indices.set(input, index);\n    stringify.call(this, input, index);\n    return index;\n}\nexports.flatten = flatten;\nfunction stringify(input, index) {\n    const { deferred, plugins, postPlugins } = this;\n    const str = this.stringified;\n    const stack = [[input, index]];\n    while (stack.length > 0) {\n        const [input, index] = stack.pop();\n        const partsForObj = (obj) => Object.keys(obj)\n            .map((k) => `\"_${flatten.call(this, k)}\":${flatten.call(this, obj[k])}`)\n            .join(\",\");\n        let error = null;\n        switch (typeof input) {\n            case \"boolean\":\n            case \"number\":\n            case \"string\":\n                str[index] = JSON.stringify(input);\n                break;\n            case \"bigint\":\n                str[index] = `[\"${utils_js_1.TYPE_BIGINT}\",\"${input}\"]`;\n                break;\n            case \"symbol\": {\n                const keyFor = Symbol.keyFor(input);\n                if (!keyFor) {\n                    error = new Error(\"Cannot encode symbol unless created with Symbol.for()\");\n                }\n                else {\n                    str[index] = `[\"${utils_js_1.TYPE_SYMBOL}\",${JSON.stringify(keyFor)}]`;\n                }\n                break;\n            }\n            case \"object\": {\n                if (!input) {\n                    str[index] = `${utils_js_1.NULL}`;\n                    break;\n                }\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    let result = isArray ? \"[\" : \"{\";\n                    if (isArray) {\n                        for (let i = 0; i < input.length; i++)\n                            result +=\n                                (i ? \",\" : \"\") +\n                                    (i in input ? flatten.call(this, input[i]) : utils_js_1.HOLE);\n                        str[index] = `${result}]`;\n                    }\n                    else if (input instanceof Date) {\n                        str[index] = `[\"${utils_js_1.TYPE_DATE}\",${input.getTime()}]`;\n                    }\n                    else if (input instanceof URL) {\n                        str[index] = `[\"${utils_js_1.TYPE_URL}\",${JSON.stringify(input.href)}]`;\n                    }\n                    else if (input instanceof RegExp) {\n                        str[index] = `[\"${utils_js_1.TYPE_REGEXP}\",${JSON.stringify(input.source)},${JSON.stringify(input.flags)}]`;\n                    }\n                    else if (input instanceof Set) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\",${[...input]\n                                .map((val) => flatten.call(this, val))\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_SET}\"]`;\n                        }\n                    }\n                    else if (input instanceof Map) {\n                        if (input.size > 0) {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\",${[...input]\n                                .flatMap(([k, v]) => [\n                                flatten.call(this, k),\n                                flatten.call(this, v),\n                            ])\n                                .join(\",\")}]`;\n                        }\n                        else {\n                            str[index] = `[\"${utils_js_1.TYPE_MAP}\"]`;\n                        }\n                    }\n                    else if (input instanceof Promise) {\n                        str[index] = `[\"${utils_js_1.TYPE_PROMISE}\",${index}]`;\n                        deferred[index] = input;\n                    }\n                    else if (input instanceof Error) {\n                        str[index] = `[\"${utils_js_1.TYPE_ERROR}\",${JSON.stringify(input.message)}`;\n                        if (input.name !== \"Error\") {\n                            str[index] += `,${JSON.stringify(input.name)}`;\n                        }\n                        str[index] += \"]\";\n                    }\n                    else if (Object.getPrototypeOf(input) === null) {\n                        str[index] = `[\"${utils_js_1.TYPE_NULL_OBJECT}\",{${partsForObj(input)}}]`;\n                    }\n                    else if (isPlainObject(input)) {\n                        str[index] = `{${partsForObj(input)}}`;\n                    }\n                    else {\n                        error = new Error(\"Cannot encode object with prototype\");\n                    }\n                }\n                break;\n            }\n            default: {\n                const isArray = Array.isArray(input);\n                let pluginHandled = false;\n                if (!isArray && plugins) {\n                    for (const plugin of plugins) {\n                        const pluginResult = plugin(input);\n                        if (Array.isArray(pluginResult)) {\n                            pluginHandled = true;\n                            const [pluginIdentifier, ...rest] = pluginResult;\n                            str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                            if (rest.length > 0) {\n                                str[index] += `,${rest\n                                    .map((v) => flatten.call(this, v))\n                                    .join(\",\")}`;\n                            }\n                            str[index] += \"]\";\n                            break;\n                        }\n                    }\n                }\n                if (!pluginHandled) {\n                    error = new Error(\"Cannot encode function or unexpected type\");\n                }\n            }\n        }\n        if (error) {\n            let pluginHandled = false;\n            if (postPlugins) {\n                for (const plugin of postPlugins) {\n                    const pluginResult = plugin(input);\n                    if (Array.isArray(pluginResult)) {\n                        pluginHandled = true;\n                        const [pluginIdentifier, ...rest] = pluginResult;\n                        str[index] = `[${JSON.stringify(pluginIdentifier)}`;\n                        if (rest.length > 0) {\n                            str[index] += `,${rest\n                                .map((v) => flatten.call(this, v))\n                                .join(\",\")}`;\n                        }\n                        str[index] += \"]\";\n                        break;\n                    }\n                }\n            }\n            if (!pluginHandled) {\n                throw error;\n            }\n        }\n    }\n}\nconst objectProtoNames = Object.getOwnPropertyNames(Object.prototype)\n    .sort()\n    .join(\"\\0\");\nfunction isPlainObject(thing) {\n    const proto = Object.getPrototypeOf(thing);\n    return (proto === Object.prototype ||\n        proto === null ||\n        Object.getOwnPropertyNames(proto).sort().join(\"\\0\") === objectProtoNames);\n}\n"},"lineCount":204}},"error":null,"hash":"d100a48b13b039cabad27ea21d18f237","cacheData":{"env":{}}}