{"id":"node_modules/turbo-stream/dist/turbo-stream.js","dependencies":[{"name":"C:\\Users\\Admin\\Downloads\\REACT\\package.json","includedInParent":true,"mtime":1740094720055},{"name":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\package.json","includedInParent":true,"mtime":1740094241366},{"name":"./flatten.js","loc":{"line":4,"column":29,"index":148},"parent":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\dist\\turbo-stream.js","resolved":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\dist\\flatten.js"},{"name":"./unflatten.js","loc":{"line":5,"column":31,"index":196},"parent":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\dist\\turbo-stream.js","resolved":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\dist\\unflatten.js"},{"name":"./utils.js","loc":{"line":6,"column":27,"index":242},"parent":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\dist\\turbo-stream.js","resolved":"C:\\Users\\Admin\\Downloads\\REACT\\node_modules\\turbo-stream\\dist\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encode = exports.decode = void 0;\nconst flatten_js_1 = require(\"./flatten.js\");\nconst unflatten_js_1 = require(\"./unflatten.js\");\nconst utils_js_1 = require(\"./utils.js\");\nasync function decode(readable, options) {\n    const { plugins } = options ?? {};\n    const done = new utils_js_1.Deferred();\n    const reader = readable\n        .pipeThrough((0, utils_js_1.createLineSplittingTransform)())\n        .getReader();\n    const decoder = {\n        values: [],\n        hydrated: [],\n        deferred: {},\n        plugins,\n    };\n    const decoded = await decodeInitial.call(decoder, reader);\n    let donePromise = done.promise;\n    if (decoded.done) {\n        done.resolve();\n    }\n    else {\n        donePromise = decodeDeferred\n            .call(decoder, reader)\n            .then(done.resolve)\n            .catch((reason) => {\n            for (const deferred of Object.values(decoder.deferred)) {\n                deferred.reject(reason);\n            }\n            done.reject(reason);\n        });\n    }\n    return {\n        done: donePromise.then(() => reader.closed),\n        value: decoded.value,\n    };\n}\nexports.decode = decode;\nasync function decodeInitial(reader) {\n    const read = await reader.read();\n    if (!read.value) {\n        throw new SyntaxError();\n    }\n    let line;\n    try {\n        line = JSON.parse(read.value);\n    }\n    catch (reason) {\n        throw new SyntaxError();\n    }\n    return {\n        done: read.done,\n        value: unflatten_js_1.unflatten.call(this, line),\n    };\n}\nasync function decodeDeferred(reader) {\n    let read = await reader.read();\n    while (!read.done) {\n        if (!read.value)\n            continue;\n        const line = read.value;\n        switch (line[0]) {\n            case utils_js_1.TYPE_PROMISE: {\n                const colonIndex = line.indexOf(\":\");\n                const deferredId = Number(line.slice(1, colonIndex));\n                const deferred = this.deferred[deferredId];\n                if (!deferred) {\n                    throw new Error(`Deferred ID ${deferredId} not found in stream`);\n                }\n                const lineData = line.slice(colonIndex + 1);\n                let jsonLine;\n                try {\n                    jsonLine = JSON.parse(lineData);\n                }\n                catch (reason) {\n                    throw new SyntaxError();\n                }\n                const value = unflatten_js_1.unflatten.call(this, jsonLine);\n                deferred.resolve(value);\n                break;\n            }\n            case utils_js_1.TYPE_ERROR: {\n                const colonIndex = line.indexOf(\":\");\n                const deferredId = Number(line.slice(1, colonIndex));\n                const deferred = this.deferred[deferredId];\n                if (!deferred) {\n                    throw new Error(`Deferred ID ${deferredId} not found in stream`);\n                }\n                const lineData = line.slice(colonIndex + 1);\n                let jsonLine;\n                try {\n                    jsonLine = JSON.parse(lineData);\n                }\n                catch (reason) {\n                    throw new SyntaxError();\n                }\n                const value = unflatten_js_1.unflatten.call(this, jsonLine);\n                deferred.reject(value);\n                break;\n            }\n            default:\n                throw new SyntaxError();\n        }\n        read = await reader.read();\n    }\n}\nfunction encode(input, options) {\n    const { plugins, postPlugins, signal } = options ?? {};\n    const encoder = {\n        deferred: {},\n        index: 0,\n        indices: new Map(),\n        stringified: [],\n        plugins,\n        postPlugins,\n        signal,\n    };\n    const textEncoder = new TextEncoder();\n    let lastSentIndex = 0;\n    const readable = new ReadableStream({\n        async start(controller) {\n            const id = flatten_js_1.flatten.call(encoder, input);\n            if (Array.isArray(id)) {\n                throw new Error(\"This should never happen\");\n            }\n            if (id < 0) {\n                controller.enqueue(textEncoder.encode(`${id}\\n`));\n            }\n            else {\n                controller.enqueue(textEncoder.encode(`[${encoder.stringified.join(\",\")}]\\n`));\n                lastSentIndex = encoder.stringified.length - 1;\n            }\n            const seenPromises = new WeakSet();\n            while (Object.keys(encoder.deferred).length > 0) {\n                for (const [deferredId, deferred] of Object.entries(encoder.deferred)) {\n                    if (seenPromises.has(deferred))\n                        continue;\n                    seenPromises.add((encoder.deferred[Number(deferredId)] = raceSignal(deferred, encoder.signal)\n                        .then((resolved) => {\n                        const id = flatten_js_1.flatten.call(encoder, resolved);\n                        if (Array.isArray(id)) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:[[\"${utils_js_1.TYPE_PREVIOUS_RESOLVED}\",${id[0]}]]\\n`));\n                            encoder.index++;\n                            lastSentIndex++;\n                        }\n                        else if (id < 0) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:${id}\\n`));\n                        }\n                        else {\n                            const values = encoder.stringified\n                                .slice(lastSentIndex + 1)\n                                .join(\",\");\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:[${values}]\\n`));\n                            lastSentIndex = encoder.stringified.length - 1;\n                        }\n                    }, (reason) => {\n                        if (!reason ||\n                            typeof reason !== \"object\" ||\n                            !(reason instanceof Error)) {\n                            reason = new Error(\"An unknown error occurred\");\n                        }\n                        const id = flatten_js_1.flatten.call(encoder, reason);\n                        if (Array.isArray(id)) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:[[\"${utils_js_1.TYPE_PREVIOUS_RESOLVED}\",${id[0]}]]\\n`));\n                            encoder.index++;\n                            lastSentIndex++;\n                        }\n                        else if (id < 0) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:${id}\\n`));\n                        }\n                        else {\n                            const values = encoder.stringified\n                                .slice(lastSentIndex + 1)\n                                .join(\",\");\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:[${values}]\\n`));\n                            lastSentIndex = encoder.stringified.length - 1;\n                        }\n                    })\n                        .finally(() => {\n                        delete encoder.deferred[Number(deferredId)];\n                    })));\n                }\n                await Promise.race(Object.values(encoder.deferred));\n            }\n            await Promise.all(Object.values(encoder.deferred));\n            controller.close();\n        },\n    });\n    return readable;\n}\nexports.encode = encode;\nfunction raceSignal(promise, signal) {\n    if (!signal)\n        return promise;\n    if (signal.aborted)\n        return Promise.reject(signal.reason || new Error(\"Signal was aborted.\"));\n    const abort = new Promise((resolve, reject) => {\n        signal.addEventListener(\"abort\", (event) => {\n            reject(signal.reason || new Error(\"Signal was aborted.\"));\n        });\n        promise.then(resolve).catch(reject);\n    });\n    abort.catch(() => { });\n    return Promise.race([abort, promise]);\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/turbo-stream/dist/turbo-stream.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}}],"sources":{"node_modules/turbo-stream/dist/turbo-stream.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encode = exports.decode = void 0;\nconst flatten_js_1 = require(\"./flatten.js\");\nconst unflatten_js_1 = require(\"./unflatten.js\");\nconst utils_js_1 = require(\"./utils.js\");\nasync function decode(readable, options) {\n    const { plugins } = options ?? {};\n    const done = new utils_js_1.Deferred();\n    const reader = readable\n        .pipeThrough((0, utils_js_1.createLineSplittingTransform)())\n        .getReader();\n    const decoder = {\n        values: [],\n        hydrated: [],\n        deferred: {},\n        plugins,\n    };\n    const decoded = await decodeInitial.call(decoder, reader);\n    let donePromise = done.promise;\n    if (decoded.done) {\n        done.resolve();\n    }\n    else {\n        donePromise = decodeDeferred\n            .call(decoder, reader)\n            .then(done.resolve)\n            .catch((reason) => {\n            for (const deferred of Object.values(decoder.deferred)) {\n                deferred.reject(reason);\n            }\n            done.reject(reason);\n        });\n    }\n    return {\n        done: donePromise.then(() => reader.closed),\n        value: decoded.value,\n    };\n}\nexports.decode = decode;\nasync function decodeInitial(reader) {\n    const read = await reader.read();\n    if (!read.value) {\n        throw new SyntaxError();\n    }\n    let line;\n    try {\n        line = JSON.parse(read.value);\n    }\n    catch (reason) {\n        throw new SyntaxError();\n    }\n    return {\n        done: read.done,\n        value: unflatten_js_1.unflatten.call(this, line),\n    };\n}\nasync function decodeDeferred(reader) {\n    let read = await reader.read();\n    while (!read.done) {\n        if (!read.value)\n            continue;\n        const line = read.value;\n        switch (line[0]) {\n            case utils_js_1.TYPE_PROMISE: {\n                const colonIndex = line.indexOf(\":\");\n                const deferredId = Number(line.slice(1, colonIndex));\n                const deferred = this.deferred[deferredId];\n                if (!deferred) {\n                    throw new Error(`Deferred ID ${deferredId} not found in stream`);\n                }\n                const lineData = line.slice(colonIndex + 1);\n                let jsonLine;\n                try {\n                    jsonLine = JSON.parse(lineData);\n                }\n                catch (reason) {\n                    throw new SyntaxError();\n                }\n                const value = unflatten_js_1.unflatten.call(this, jsonLine);\n                deferred.resolve(value);\n                break;\n            }\n            case utils_js_1.TYPE_ERROR: {\n                const colonIndex = line.indexOf(\":\");\n                const deferredId = Number(line.slice(1, colonIndex));\n                const deferred = this.deferred[deferredId];\n                if (!deferred) {\n                    throw new Error(`Deferred ID ${deferredId} not found in stream`);\n                }\n                const lineData = line.slice(colonIndex + 1);\n                let jsonLine;\n                try {\n                    jsonLine = JSON.parse(lineData);\n                }\n                catch (reason) {\n                    throw new SyntaxError();\n                }\n                const value = unflatten_js_1.unflatten.call(this, jsonLine);\n                deferred.reject(value);\n                break;\n            }\n            default:\n                throw new SyntaxError();\n        }\n        read = await reader.read();\n    }\n}\nfunction encode(input, options) {\n    const { plugins, postPlugins, signal } = options ?? {};\n    const encoder = {\n        deferred: {},\n        index: 0,\n        indices: new Map(),\n        stringified: [],\n        plugins,\n        postPlugins,\n        signal,\n    };\n    const textEncoder = new TextEncoder();\n    let lastSentIndex = 0;\n    const readable = new ReadableStream({\n        async start(controller) {\n            const id = flatten_js_1.flatten.call(encoder, input);\n            if (Array.isArray(id)) {\n                throw new Error(\"This should never happen\");\n            }\n            if (id < 0) {\n                controller.enqueue(textEncoder.encode(`${id}\\n`));\n            }\n            else {\n                controller.enqueue(textEncoder.encode(`[${encoder.stringified.join(\",\")}]\\n`));\n                lastSentIndex = encoder.stringified.length - 1;\n            }\n            const seenPromises = new WeakSet();\n            while (Object.keys(encoder.deferred).length > 0) {\n                for (const [deferredId, deferred] of Object.entries(encoder.deferred)) {\n                    if (seenPromises.has(deferred))\n                        continue;\n                    seenPromises.add((encoder.deferred[Number(deferredId)] = raceSignal(deferred, encoder.signal)\n                        .then((resolved) => {\n                        const id = flatten_js_1.flatten.call(encoder, resolved);\n                        if (Array.isArray(id)) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:[[\"${utils_js_1.TYPE_PREVIOUS_RESOLVED}\",${id[0]}]]\\n`));\n                            encoder.index++;\n                            lastSentIndex++;\n                        }\n                        else if (id < 0) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:${id}\\n`));\n                        }\n                        else {\n                            const values = encoder.stringified\n                                .slice(lastSentIndex + 1)\n                                .join(\",\");\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_PROMISE}${deferredId}:[${values}]\\n`));\n                            lastSentIndex = encoder.stringified.length - 1;\n                        }\n                    }, (reason) => {\n                        if (!reason ||\n                            typeof reason !== \"object\" ||\n                            !(reason instanceof Error)) {\n                            reason = new Error(\"An unknown error occurred\");\n                        }\n                        const id = flatten_js_1.flatten.call(encoder, reason);\n                        if (Array.isArray(id)) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:[[\"${utils_js_1.TYPE_PREVIOUS_RESOLVED}\",${id[0]}]]\\n`));\n                            encoder.index++;\n                            lastSentIndex++;\n                        }\n                        else if (id < 0) {\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:${id}\\n`));\n                        }\n                        else {\n                            const values = encoder.stringified\n                                .slice(lastSentIndex + 1)\n                                .join(\",\");\n                            controller.enqueue(textEncoder.encode(`${utils_js_1.TYPE_ERROR}${deferredId}:[${values}]\\n`));\n                            lastSentIndex = encoder.stringified.length - 1;\n                        }\n                    })\n                        .finally(() => {\n                        delete encoder.deferred[Number(deferredId)];\n                    })));\n                }\n                await Promise.race(Object.values(encoder.deferred));\n            }\n            await Promise.all(Object.values(encoder.deferred));\n            controller.close();\n        },\n    });\n    return readable;\n}\nexports.encode = encode;\nfunction raceSignal(promise, signal) {\n    if (!signal)\n        return promise;\n    if (signal.aborted)\n        return Promise.reject(signal.reason || new Error(\"Signal was aborted.\"));\n    const abort = new Promise((resolve, reject) => {\n        signal.addEventListener(\"abort\", (event) => {\n            reject(signal.reason || new Error(\"Signal was aborted.\"));\n        });\n        promise.then(resolve).catch(reject);\n    });\n    abort.catch(() => { });\n    return Promise.race([abort, promise]);\n}\n"},"lineCount":208}},"error":null,"hash":"15702bb41e47cc5311045962d735808e","cacheData":{"env":{}}}